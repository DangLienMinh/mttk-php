<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getFirst_name()
    {
        $this->__load();
        return parent::getFirst_name();
    }

    public function setFirst_name($first_name)
    {
        $this->__load();
        return parent::setFirst_name($first_name);
    }

    public function getLast_name()
    {
        $this->__load();
        return parent::getLast_name();
    }

    public function setLast_name($last_name)
    {
        $this->__load();
        return parent::setLast_name($last_name);
    }

    public function getEmail()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["email"];
        }
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getPicture()
    {
        $this->__load();
        return parent::getPicture();
    }

    public function setPicture($picture)
    {
        $this->__load();
        return parent::setPicture($picture);
    }

    public function getOnline()
    {
        $this->__load();
        return parent::getOnline();
    }

    public function setOnline($online)
    {
        $this->__load();
        return parent::setOnline($online);
    }

    public function getCreated_at()
    {
        $this->__load();
        return parent::getCreated_at();
    }

    public function setCreated_at($created_at)
    {
        $this->__load();
        return parent::setCreated_at($created_at);
    }

    public function getBirthday()
    {
        $this->__load();
        return parent::getBirthday();
    }

    public function setBirthday($birthday)
    {
        $this->__load();
        return parent::setBirthday($birthday);
    }

    public function getLast_login()
    {
        $this->__load();
        return parent::getLast_login();
    }

    public function setLast_login($last_login)
    {
        $this->__load();
        return parent::setLast_login($last_login);
    }

    public function getCoverImg()
    {
        $this->__load();
        return parent::getCoverImg();
    }

    public function setCoverImg($coverImg)
    {
        $this->__load();
        return parent::setCoverImg($coverImg);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'email', 'password', 'first_name', 'last_name', 'picture', 'coverImg', 'online', 'last_login', 'created_at', 'birthday');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}