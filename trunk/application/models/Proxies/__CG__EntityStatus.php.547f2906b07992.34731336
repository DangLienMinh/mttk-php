<?php

namespace DoctrineProxies\__CG__\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Status extends \Entity\Status implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getStatus_id()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["status_id"];
        }
        $this->__load();
        return parent::getStatus_id();
    }

    public function setStatus_id($status_id)
    {
        $this->__load();
        return parent::setStatus_id($status_id);
    }

    public function getMessage()
    {
        $this->__load();
        return parent::getMessage();
    }

    public function setMessage($message)
    {
        $this->__load();
        return parent::setMessage($message);
    }

    public function getMusic()
    {
        $this->__load();
        return parent::getMusic();
    }

    public function setMusic($music)
    {
        $this->__load();
        return parent::setMusic($music);
    }

    public function getCreated_at()
    {
        $this->__load();
        return parent::getCreated_at();
    }

    public function setCreated_at($created_at)
    {
        $this->__load();
        return parent::setCreated_at($created_at);
    }

    public function getThumbs_up()
    {
        $this->__load();
        return parent::getThumbs_up();
    }

    public function setThumbs_up($thumbs_up)
    {
        $this->__load();
        return parent::setThumbs_up($thumbs_up);
    }

    public function getPrivacy_type_id()
    {
        $this->__load();
        return parent::getPrivacy_type_id();
    }

    public function setPrivacy_type_id($privacy_type_id)
    {
        $this->__load();
        return parent::setPrivacy_type_id($privacy_type_id);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'status_id', 'message', 'music', 'title', 'created_at', 'thumbs_up', 'privacy_type_id', 'email');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}